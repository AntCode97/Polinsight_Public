spring :
  profiles :
    group :
      dev :  common, db, dev
      prod : common, db, prod
---
server :
  port : 8080
  servlet :
    context-path :             /
    encoding :
      charset : UTF-8
    application-display-name : dnslab_polinsight
    session :
      cookie :
        http-only : true
  error :
    path : /templates/error


spring :
  servlet :
    multipart :
      max-file-size :    102400KB
      max-request-size : 102400KB

  security :
    oauth2 :
      client :
        provider :
          #          google :
          naver :
            authorization-uri :   https://nid.naver.com/oauth2.0/authorize
            token_uri :           https://nid.naver.com/oauth2.0/token
            user-info-uri :       https://openapi.naver.com/v1/nid/me
            user-name-attribute : response # 네이버에서 반환하는 데이터 구조를 보면 알 수 있음
          kakao :
            authorization-uri :   https://kauth.kakao.com/oauth/authorize
            token-uri :           https://kauth.kakao.com/oauth/token
            user-info-uri :       https://kapi.kakao.com/v2/user/me
            user-name-attribute : id
        registration :
          google :
            clientId :            dd
            clientSecret :        dd
            redirectUriTemplate : "{baseUrl}/oauth2/callback/{registrationId}"
            scope :
              - email
              - profile
          naver :
            client-name :              Naver
            client-id :                dd
            client-secret :            dd
            authorization-grant-type : authorization_code
            redirect-uri :             "{baseUrl}/login/oauth2/code/{registrationId}"
            scope :
              - name
              - email
              - profile_image
          kakao :
            client-name :                  Kakao
            client-id :                    dd
            client-secret :                dd
            authorization-grant-type :     authorization_code
            redirect-uri :                 "{baseUrl}/login/oauth2/code/{registrationId}"
            client-authentication-method : POST
            scope :
              - profile
              - account_email

  mvc :
    static-path-pattern : /static/**
  web :
    resources :
      static-locations : classpath:/static/
      add-mappings :     true

  cache :
    type : redis

  mail :
    host :  # smtp address
    port :  # smtp port
    username :  # smtp 등록 계정
    password :  # smtp 등록 계정의 패스워드
    properties :
      mail :
        smtp :
          auth : true
          starttls :
            enable : true
  config :
    activate :
      on-profile : common

file:
  upload:
    baseLocation: "./upload-dir/"

custom :
  permission :
    resources :  /css/**, /js/**, /img/**
    admin :
    template :   /signup, /index, /, /404, loginSuccess, /loginpage, /user/**, /findpassword, /terms, /alert, /wholesign, /boards/**
    swagger-ui : /swagger-resources/**, /swagger-ui.html, /v2/api-docs,/webjars/**, /swagger-ui/**, /api-docs

---
spring :
  datasource :
    username :          root
    password :          root
    url :               jdbc:mariadb://localhost:3306/polinsight
    driver-class-name : org.mariadb.jdbc.Driver

  data :
    mongodb :
      uri : mongodb://localhost:27017/polinsight

  config :
    activate :
      on-profile : db

  jpa :
    hibernate :
      ddl-auto : update
    properties :
      format_sql : true

  redis :
    host : localhost
    port : 6379
---
spring :
  config :
    activate :
      on-profile : dev


  jpa :
    hibernate :
      ddl-auto : update
    show-sql : true
  banner :
    location : banner-dev.txt
  session :
    store-type : none

---
spring :
  config :
    activate :
      on-profile : prod
  jpa :
    hibernate :
      ddl-auto : update
    show-sql : true
  banner :
    location : banner-prod.txt

  session :
    store-type : redis